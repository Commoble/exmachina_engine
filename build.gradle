plugins {
	id 'java'
	id 'eclipse'
	id 'idea'
	id 'maven-publish'
	id 'net.minecraftforge.gradle' version '[6.0,6.2)'
	// this version works on gradle 7.x
	id 'com.github.johnrengelman.shadow' version '7.1.2'
}

version = "${mod_version}"
group = "commoble.${modid}"

base {
	archivesName = "${modid}-${mc_version}"
}

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

sourceSets
{
	main
	test
	gametest
	datagen
	generated
}

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
	mappings channel: 'official', version: "${mc_version}"

	// When true, this property will have all Eclipse/IntelliJ IDEA run configurations run the "prepareX" task for the given run configuration before launching the game.
	// In most cases, it is not necessary to enable.
	enableEclipsePrepareRuns = true
	enableIdeaPrepareRuns = true

	// This property allows configuring Gradle's ProcessResources task(s) to run on IDE output locations before launching the game.
	// It is REQUIRED to be set to true for this template to function.
	// See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
	copyIdeResources = true

	// When true, this property will add the folder name of all declared run configurations to generated IDE run configurations.
	// The folder name can be set on a run configuration using the "folderName" property.
	// By default, the folder name of a run configuration is the name of the Gradle project containing it.
	// generateRunFolders = true
	
	// accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

	// Default run configurations.
	// These can be tweaked, removed, or duplicated as needed.
	runs {
		// applies to all the run configs below
		configureEach {
			workingDirectory project.file('run')
			property 'forge.logging.console.level', 'debug'

			mods {
				"${modid}" {
					source sourceSets.main
				}
			}
		}

		client {
			// Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
			property 'forge.enabledGameTestNamespaces', modid
		}

		server {
			property 'forge.enabledGameTestNamespaces', modid
		}

		// This run config launches GameTestServer and runs all registered gametests, then exits.
		// By default, the server will crash when no gametests are provided.
		// The gametest system is also enabled by default for other run configs under the /test command.
		gameTestServer {
			property 'forge.enabledGameTestNamespaces', modid
			mods {
				"${modid}" {
					source sourceSets.main
					source sourceSets.gametest
				}
			}
		}

		data {
			// example of overriding the workingDirectory set in configureEach above
			workingDirectory project.file('run-data')

			// Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
			args '--mod', modid, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
		}
	}
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

configurations {
	shade
}

repositories {
	maven {url = "https://maven.blamejared.com/"}
	maven {url = "https://cubicinterpolation.net/maven/"}
}

dependencies {
	minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"
	implementation fg.deobf("commoble.databuddy:databuddy-${databuddy_mc_version}:${databuddy_version}")
	shade fg.deobf("commoble.databuddy:databuddy-${databuddy_mc_version}:${databuddy_version}")
	testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.2'
	testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.6.2'
}
test {
	useJUnitPlatform()
}

shadowJar {
	archiveClassifier = ''
	configurations = [project.configurations.shade]
	relocate 'commoble.databuddy', "${project.group}.shadow.commoble.databuddy"
}

reobf {
	shadowJar { }
}

java
{
	withSourcesJar()
	withJavadocJar()
}

// Example for how to get properties into the manifest for reading at runtime.
tasks.named('jar', Jar).configure {
	manifest {
		attributes([
				'Specification-Title'	 : modid,
				'Specification-Vendor'	: "Commoble",
				'Specification-Version'   : '1', // We are version 1 of ourselves
				'Implementation-Title'	: project.name,
				'Implementation-Version'  : project.jar.archiveVersion,
				'Implementation-Vendor'   : "Commoble",
				'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
		])
	}

	// This is the preferred method to reobfuscate your jar file
	// finalizedBy 'reobfJar'
}

// this replaces jar.finalizedBy('reobfJar') in the standard forge mod buildscript
tasks.build.dependsOn reobfShadowJar
jar.finalizedBy('reobfShadowJar')

// run "gradlew build publish" to build jars and generate a maven repo for them
// run "gradlew build" to build the jars without mavening them
publishing {
	publications {
		mavenJava(MavenPublication) {
			artifactId project.archivesBaseName
			artifact tasks.jarJar
			artifact sourcesJar
			artifact javadocJar
		}
	}
	repositories {
		maven {
			name="localMaven"
			url "file:///${project.projectDir}/maven"
		}
	}
}

tasks.withType(JavaCompile).configureEach {
	options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
